from tkinter import *
from textwrap import wrap
from tkinter import messagebox as mb
import tkinter as tk
from tkinter import scrolledtext



class Login():

    def __init__(self ):
        self.dict_sost = {
            0: "Объем данных превышает 20МБ ?",
            1: "Данные сильно взаимосвязаны между собой?",
            2: "Данные подготовлены?",
            3: "Данные имеют табличный вид?",
            4: "Вам необходимо предсказать значение зависимой от независимой перменной?",
            5: "Привести данные к табличному виду",
            6: "Записи в данных корректны и не пусты?",
            7: "Исключить записи с пустыми и некорректными значениями",
            8: "Числовые значения имеют диапазоны?",
            9: "Привести числовые значения к диапазону",
            10: "Категориальные данные представлены в числе?",
            11: "Представить категориальные данные в числовом виде",
            12: "Данные подготовлены к обработке",
            13: "Используйте регрессионный анализ",
            14: "Вам необходимо определить принадлежность объектов к опеределенным классам?",
            15: "Используйте классификацию данных",
            16: "Необходимо определить взаимосвязь двух или нескольких случайных параметров?",
            17: "Используйте корреляционный анализ",
            18: "Что необходимо проанализировать?",
            19: "Используйте анализ панельных данных",
            20: "Используйте Data Mining",
            21: "Используйте искусственные нейронные сети",
            22: "Используйте простые методы анализа данных",
            23: "Не целесообразно проводить анализ",
        }
        self.dict_otvetov = {
            0: {"Да": 2, "Нет": 1},
            1: {"Да": 22, "Нет": 23},
            2: {"Да": 4, "Нет": 3},
            3: {"Да": 6, "Нет": 5},
            4: {"Да": 13, "Нет": 14},
            6: {"Да": 8, "Нет": 7},
            8: {"Да": 10, "Нет": 9},
            10: {"Да": 12, "Нет": 11},
            14: {"Да": 15, "Нет": 16},
            16: {"Да": 17, "Нет": 18},
            18: {"Повторяющиеся значения": 19, "Набор данных для бизнеса": 20, "Изображения": 21},
        }
        self.dict_end_find = {
            22: 1,
            23: 1,
            5: 1,
            7: 1,
            9: 1,
            11: 1,
            12: 1,
            13: 1,
            15: 1,
            17: 1,
            19: 1,
            20: 1,
            21: 1,
            1: 0,
            2: 0,
            3: 0,
            4: 0,
            6: 0,
            8: 0,
            10: 0,
            14: 0,
            16: 0,
            18: 0,
        }
        self.dict_help = {
            0: "От объема данных зависит многое. Объем данных превышает 20 МБ?",
            1: "Вы выбрали вариант ответа 'Нет, объем данных не превышает 20 МБ', проводить анализ данных с небольшим объемом следует при условии, что они сильно взаимосвязаны. От связи между данными зависит корректность анализа данных.",
            2: "Вы выбрали вариант ответа 'Да, объем данных превышает 20 МБ'. Это означает, что большие данные можно анализировать, так как из них получится полезная информация. Но прежде, чем производить анализ необходимо, чтобы данные были подготовлены (были удобны для анализа).",
            3: "Вы выбрали вариант ответа 'Да, объем данных превышает 20 МБ', а после - 'Нет, данные не подготовлены'. Это означает что собранные данные не имеют структуризации. А значит необходимо определить, что необходимо привести в порядок. Немало важный характер данных имеет табличный вид.",
            4: "Вы выбрали вариант ответа 'Да, объем данных превышает 20 МБ', а после - 'Да, данные подготовлены'. Вы собрали данные и их подготовили к анализу. Вы хотите предсказать значения зависимой от независимой переменной в своем наборе данных?",
            5: "Вы выбрали вариант ответа ‘Да, объем данных превышает 20 МБ‘, а после – ‘Нет, данные не подготовлены’ и данные ‘Не имеют табличного вида’. Поэтому советуем Вам привести данные к табличному виду, дабы изучать данные и проводить последующие операции с ними было просто",
            6: "Вы выбрали вариант ответа ‘Да, объем данных превышает 20 МБ’, а после – ‘Нет, данные не подготовлены’, но данные ‘Имеют табличный вид’. Если данные представлены в виде таблицы, то строки в этих данных должны иметь значения и не должны быть пустыми.",
            7: "Вы выбрали вариант ответа ‘Да, объем данных превышает 20 МБ ‘, а после – ‘Нет, данные не подготовлены’, но данные ‘Имеют табличный вид’ и ‘Записи некорректны и пусты’. Для анализа данных необходимо, чтобы данные были корректны, иначе при выдаче результатов анализа будет отображена неполная картина. ",
            8: "Вы выбрали вариант ответа ‘ Да, объем данных превышает 20 МБ ‘, а после – ‘Нет, данные не подготовлены’, но данные ‘Имеют табличный вид’ и ‘Записи корректны и непустые’. Когда данные представлены в табличном виде, а их записи корректны, то в столбцах таблицы необходимо. Чтобы присутствовали числовые диапазоны, это важно, потому что таким образом происходит более точный анализ.",
            9: "Вы выбрали вариант ответа ‘ Да, объем данных превышает 20 МБ ‘, а после – ‘Нет, данные не подготовлены’, но данные ‘Имеют табличный вид’ и ‘Записи корректны и непустые’, а после чего выбрали ‘Нет, числовые значения не имеют диапазонов’. Вам необходимо привести числовые значения к диапазонам. Это нужно, чтобы при применении метода анализа не происходило отклонений в вычислениях.",
            10: "Вы выбрали вариант ответа ‘ Да, объем данных превышает 20 МБ ‘, а после – ‘Нет, данные не подготовлены’, но данные ‘Имеют табличный вид’ и ‘Записи корректны и непустые’, а после чего выбрали ‘Да, числовые значения не имеют диапазонов’. Все данные, представленные в таблице, имеют тип данных строка, даже если есть числа. Именно поэтому нужно категориальные данные представлять в числовом виде типа число.",
            11: "Вы выбрали вариант ответа ‘Да, объем данных превышает 20 МБ ‘, а после – ‘Нет, данные не подготовлены’, но данные ‘Имеют табличный вид’ и ‘Записи корректны и непустые’, а после чего выбрали ‘Да, числовые значения не имеют диапазонов’. Далее на вопросе ответили ‘Нет, категориальные данные не представлены в числовом виде’. Поэтому Вам необходимо привести данные в числовой вид.",
            12: "Вы выбрали вариант ответа ‘Да, объем данных превышает 20 МБ ‘, а после – ‘Нет, данные не подготовлены’, но данные ‘Имеют табличный вид’ и ‘Записи корректны и непустые’, а после чего выбрали ‘Да, числовые значения не имеют диапазонов’. Далее на вопросе ответили ‘Да, категориальные данные представлены в числовом виде’. Поэтому исследуемые данные подготовлены к последующей обработке.",
            13: "Вы выбрали вариант ответа ‘ Да, объем данных превышает 20 МБ ‘, а после – ‘Да, данные подготовлены’. После чего выбрали ‘Да, предсказать значение независимой от зависимой переменной’. Поэтому Вам рекомендуется использовать регрессионный анализ.",
            14: "Вы выбрали вариант ответа ‘Да, объем данных превышает 20 МБ ‘, а после – ‘Да, данные подготовлены’. После чего выбрали ‘Нет, не предсказывать значение независимой от зависимой переменной’. Поэтому мы спрашиваем у Вас может быть необходимо определить принадлежность объектов к определенным классам?",
            15: "Вы выбрали вариант ответа ‘Да, объем данных превышает 20 МБ ‘, а после – ‘Да, данные подготовлены’. После чего выбрали ‘Нет, не предсказывать значение независимой от зависимой переменной’. Поэтому мы спрашиваем у Вас может быть необходимо определить принадлежность объектов к определенным классам?",
            16: "Вы выбрали вариант ответа ‘Да, объем данных превышает 20 МБ ‘, а после – ‘Да, данные подготовлены’. После чего выбрали ‘Нет, не предсказывать значение независимой от зависимой переменной’. Но ответили ‘Нет, не определять принадлежность объектов к классам’. Пытаясь обнаружить вашу цель анализа, следует следующий вопрос нужно ли определить взаимосвязь случайных параметров?",
            17: "Вы выбрали вариант ответа ‘ Да, объем данных превышает 20 МБ ‘, а после – ‘Да, данные подготовлены’. После чего выбрали ‘Нет, не предсказывать значение независимой от зависимой переменной’, а потом ответили ‘Нет, не определять принадлежность объектов к классам’, но выбрали ‘Да, определить взаимосвязь случ параметров’. Рекомендуем Вам использовать корреляционный анализ.",
            18: "Вы выбрали вариант ответа ‘ Да, объем данных превышает 20 МБ ‘, а после – ‘Да, данные подготовлены’. После чего выбрали ‘Нет, не предсказывать значение независимой от зависимой переменной’, а потом ответили ‘Нет, не определять принадлежность объектов к классам’, и выбрали ‘Нет, определить взаимосвязь случ параметров’. В данном случае система предлагает вам три варианта ответа Повторяющиеся значения, Набор данных для бизнеса, Изображения.",
            19: "Вы выбрали вариант ответа ‘Да, объем данных превышает 20 МБ ‘, а после – ‘Да, данные подготовлены’. После чего выбрали ‘Нет, не предсказывать значение независимой от зависимой переменной’, а потом ответили ‘Нет, не определять принадлежность объектов к классам’, и выбрали ‘Нет, определить взаимосвязь случ параметров’. В конце вы ответили ‘Повторяющиеся значения’. Поэтому рекомендуем использовать анализ панельных данных.",
            20: "Вы выбрали вариант ответа ‘Да, объем данных превышает 20 МБ ‘, а после – ‘Да, данные подготовлены’. После чего выбрали ‘Нет, не предсказывать значение независимой от зависимой переменной’, а потом ответили ‘Нет, не определять принадлежность объектов к классам’, и выбрали ‘Нет, определить взаимосвязь случ параметров’. В конце вы ответили ‘ Набор данных для бизнеса ‘. Поэтому рекомендуем использовать Data Mining",
            21: "Вы выбрали вариант ответа ‘Да, объем данных превышает 20 МБ ‘, а после – ‘Да, данные подготовлены’. После чего выбрали ‘Нет, не предсказывать значение независимой от зависимой переменной’, а потом ответили ‘Нет, не определять принадлежность объектов к классам’, и выбрали ‘Нет, определить взаимосвязь случ параметров’. В конце вы ответили ‘ Изображения ‘. Поэтому рекомендуем использовать искусственные нейронные сети",
            22: "Вы выбрали вариант ответа ‘Нет, объем данных не превышает 20 МБ’, а после ответили ‘Да, данные сильно взаимосвязаны между собой’. Поэтому рекомендуем вам использовать простые методы анализа данных",
            23: "Вы выбрали вариант ответа ‘Нет, объем данных не превышает 20 МБ’, а после ответили ‘Нет, данные не сильно взаимосвязаны между собой’. Поэтому хотим сказать, что проводить анализ нецелесообразно, ввиду отсутствия существенного набора данных.",
        }

        self.login = Tk()
        self.login.geometry('300x150')
        self.login.title("Авторизация")
        self.lbl = Label(self.login, text="Авторизация", font=("Arial Bold", 15))
        self.lbl.pack()
        self.lb1l = Label(self.login, text="", font=("Arial Bold", 15))
        self.lb1l.pack()
        btn_user = Button(self.login, text="Пользователь", font=("Arial Bold", 13), command=self.start_user )
        btn_user.pack()
        btn_expert = Button(self.login, text="Эксперт", font=("Arial Bold", 13), command=self.start_expert )
        btn_expert.pack()
        self.login.mainloop()

    def start_user(self):
        self.login.destroy()
        about = App_user(self.dict_sost, self.dict_otvetov, self.dict_end_find, self.dict_help)

    def start_expert(self):
        self.login.destroy()
        about = Expert_app(self.dict_sost, self.dict_otvetov, self.dict_end_find, self.dict_help)

class Expert_app:
    def __init__(self, dict_sost, dict_otvetov, dict_end_find, dict_help):
        self.expert = Tk()
        self.expert .geometry('800x750')
        self.expert .title("Внутрение настройки")

        self.lbl = Label(self.expert, text="Хранилище состояний", font=("Arial Bold", 15))
        self.lbl.pack()
        text = scrolledtext.ScrolledText(width=85, height=7, bg="darkgreen",
                    fg='white', wrap=WORD)
        text.pack()
        for  i in dict_sost:
            text.insert(INSERT, i)
            text.insert(INSERT, "  " + dict_sost[i] + "\n")


        self.lbl = Label(self.expert, text="Переходы состояний", font=("Arial Bold", 15))
        self.lbl.pack()
        text = scrolledtext.ScrolledText(width=85, height=7, bg="darkgreen",
                                         fg='white', wrap=WORD)
        text.pack()
        for  i in dict_otvetov:
            text.insert(INSERT, i)
            text.insert(INSERT, "  " + str(dict_otvetov[i]) + "\n")


        self.lbl = Label(self.expert, text="Конечные состояния", font=("Arial Bold", 15))
        self.lbl.pack()
        text = scrolledtext.ScrolledText(width=85, height=7, bg="darkgreen",
                                         fg='white', wrap=WORD)
        text.pack()
        for i in dict_end_find:
            text.insert(INSERT, i)
            text.insert(INSERT, "  " + str(dict_end_find[i]) + "\n")


        self.lbl = Label(self.expert, text="Блок объяснений", font=("Arial Bold", 15))
        self.lbl.pack()
        text = scrolledtext.ScrolledText(width=85, height=9, bg="darkgreen",
                                         fg='white', wrap=WORD)
        text.pack()
        for i in dict_help:
            text.insert(INSERT, i)
            text.insert(INSERT, "  " + dict_help[i] + "\n")

        self.lbl = Label(self.expert, text=" ", font=("Arial Bold", 15))
        self.lbl.pack()
        btn_OK = Button(self.expert, text="Применить настройки", font=("Arial Bold", 13))
        btn_OK.pack()
        btn_exit = Button(self.expert, text="Выход", font=("Arial Bold", 13), command=self.exit)
        btn_exit.pack()

        self.expert.mainloop()

    def exit(self):
        self.expert.destroy()
        about = Login()


class App_user:


    def __init__(self, dict_sost, dict_otvetov, dict_end_find, dict_help ):

        self.window_find = Tk()
        self.window_find.geometry('475x250')
        self.window_find.title("Добро пожаловать в экспертную систему")

        self.key_sost = 0
        self.dict_sost = dict_sost
        self.dict_otvetov = dict_otvetov
        self.dict_end_find = dict_end_find
        self.dict_help = dict_help

        self.lbl = Label(self.window_find, text=self.dict_sost[self.key_sost], font=("Arial Bold", 15))
        self.lbl.place(x=30, y=20)

        btn_otvet = Button(self.window_find, text="Ответить", font=("Arial Bold", 13),command=self.find_sost)
        btn_otvet.place(x=210, y=85)

        btn_help = Button(self.window_find, text="?Помощь", font=("Arial Bold", 13),command=self.help)
        btn_help.place(x=310, y=85)

        btn_restart = Button(self.window_find, text="Начать сначала", font=("Arial Bold", 13),command=self.restart)
        btn_restart.place(x=40, y=180)

        btn_exit = Button(self.window_find, text="Выход", font=("Arial Bold", 13),command=self.exit)
        btn_exit.place(x=210, y=180)

        self.txt = Entry(self.window_find, width=15)
        self.txt.place(x=100, y=90, width=75, height=30)
        self.txt.focus()

        self.window_find.mainloop()

    def perenos_strok(self,dict,window,lbl):
        window.update()
        if lbl.winfo_width() > 400:
            char_width = lbl.winfo_width() / len(dict[self.key_sost])
            wrapped_text = '\n'.join(wrap(dict[self.key_sost], int(425 / char_width)))
            lbl['text'] = wrapped_text

    def exit(self):
        res = mb.askyesno("Выход", "Вы уверены?")
        if res:
            self.window_find.destroy()
            about = Login()

    def help(self):

        window_help = Tk()
        window_help.geometry('445x350')
        window_help.title("?Помощь")
        lbl_help = Label(window_help, text=self.dict_help[self.key_sost], font=("Arial Bold", 15))
        lbl_help.place(x=5, y=30)
        self.perenos_strok(self.dict_help, window_help,lbl_help)
        window_help.mainloop()

    def restart(self):
        res=mb.askyesno("Начать сначала", "Вы уверены?")
        if res:
            self.key_sost = 0
            self.lbl.configure(text=self.dict_sost[self.key_sost])

    def find_sost(self):
        otvet=self.txt.get()
        #if otvet=="Да" or otvet=="Нет":  ПОДУМАТЬ НАД ПРОВЕРКОЙ ВВОДА, СОЗДАТЬ ОТДЕЛЬНЫЙ МЕТОД
        self.txt.delete(0, END)
        try:
            self.key_sost = self.dict_otvetov[self.key_sost][otvet]
        except KeyError:
            mb.showinfo('Ошибка!',"Пустое поле")
        self.end_find()
        self.perenos_strok(self.dict_sost, self.window_find, self.lbl)


    def end_find(self):
       if self.dict_end_find[ self.key_sost] == 1:
           #mb.showinfo('Поиск закончен', "Ответ системы: "+self.dict_sost[self.key_sost]+"\n \n Вопросов больше нет")
           self.lbl.configure(text=self.dict_sost[self.key_sost]+"\n  Вопросов больше нет")
       else:
           self.lbl.configure(text=self.dict_sost[self.key_sost])



# app= Start_app()
app= Login()